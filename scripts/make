#!/bin/sh

## hyphop ##

#= make khadas uboot script wrapper

PR=$(dirname $0)
RP=$(realpath $PR)

cd "$PR" || exit 1

MSG(){
    echo "[i] $@"
}

info_msg(){
    echo "[i] $@"
}

CMD(){
    echo "[#] $@">&2
    "$@"
}

FAIL(){
    echo "[e] $@">&2
    exit 1
}

PATCHING(){
[ -e "$BS/.ready.log" ] || {

for P in $PKD/patches/$PKG_VERSION/*.patch; do
    [ -f "$P" ] && {
	PN=$(basename $P)
	echo "[i] PATCH $PN"
	patch -p1 -d"$BS" < "$P" || FAIL
    }
done

echo READY > "$BS/.ready.log"

}
}

BUILD_PKG(){
PKG="$PKD/package.mk"

echo "[i] build $PKG"

make_host(){
.
}

make_target(){
.
}

post_make_target(){
.
}

. $PKG

./download \
    "$PKG_URL" \
    "$PKG_SOURCE_NAME" \
    "$DOWNLOADS" || FAIL download uboot source

BS="$BUILD/$PKG_SOURCE_DIR"

[ -s "$BS" ] || { echo "[i] EXTRACT ... $BS"
CMD tar -xf"$(realpath "$DOWNLOADS/$PKG_SOURCE_NAME")" -C"$BUILD" --one-top-level="$PKG_SOURCE_DIR"
CMD ln -sf "$PKG_SOURCE_DIR" "$BUILD/$PKG_NAME"
}

PATCHING

cd $BS

make_host || echo "[w] make_host $PKD .. no ..."

[ "$1" = "u-boot-mainline" ] || \
make_target || echo "[w] make_target $PKD  ... no ..."

cd -

}

generate_sd_mmc_image(){

[ -f $UBOOT_SD_MMC ] && \
    rm $UBOOT_SD_MMC

dd if=/dev/null bs=1M count=1 seek=1 of=$UBOOT_SD_MMC 2>/dev/null

write_uboot_platform$1 "$BS" "$UBOOT_SD_MMC"


ls -1l $UBOOT_SD_MMC
}


#################################
## BEGIN
##

echo "[i] make khadas uboot"

. ./build.conf

[ -d $DOWNLOADS ] || \
    mkdir -p $DOWNLOADS

[ -d "$BUILD" ] || \
    mkdir -p "$BUILD"

./download \
    $DLBASE/$GCCZ \
    $GCCZ \
    $DOWNLOADS || FAIL download gcc

[ -s "$BUILD/$GCC" ] || { echo "[i] EXTRACT ... $GCC"
tar -xf"$(realpath "$DOWNLOADS/$GCCZ")"        -C"$BUILD" --one-top-level="$GCC" || FAIL 
ln -sf $GCC $BUILD/gcc
}

./download \
    $DLBASE/$GCCZN \
    $GCCZN \
    $DOWNLOADS || FAIL download gcc

[ -s "$BUILD/$GCCN" ] || { echo "[i] EXTRACT ... $GCCN"
tar -xf"$(realpath "$DOWNLOADS/$GCCZN")"        -C"$BUILD" --one-top-level="$GCCN" || FAIL 
ln -sf $GCCN $BUILD/gcc-none-eabi
}

./download \
    $DLBASE/$FIPZ \
    $FIPZ \
    $DOWNLOADS || FAIL download fip

[ -s "$BUILD/$FIP" ] || { echo "[i] EXTRACT ... $FIP"
tar -xf"$(realpath "$DOWNLOADS/$FIPZ")"        -C"$BUILD" --one-top-level="$FIP" || FAIL
}

[ "$1" = re ] && {
    MSG REBUILD UBOOT
    rm -rf $BUILD/u-boot-*
    shift
}

export UBOOT_COMPILER_PATH=$(realpath "$BUILD/gcc")/bin
export PATH="$EXTRA_PATH:$UBOOT_COMPILER_PATH:$PATH"
export ARCH=arm64
export CROSS_COMPILE=aarch64-none-linux-gnu-
export UBOOT_COMPILER=$CROSS_COMPILE

${CROSS_COMPILE}gcc --version || FAIL gcc
arm-none-eabi-gcc --version || FAIL $PATH gcc-none-eabi

#for P in rkbin arm-trusted-firmware u-boot-mainline; do
for P in arm-trusted-firmware u-boot-mainline; do
    PKD=../packages/$P
    BUILD_PKG $P
done

[ "$DEF_CONFIG" ] || DEF_CONFIG=$DEF_CONFIG2
#khadas-vim_defconfig

case $DEF_CONFIG in
    *edge*|*rk*)

    VENDOR=Rockchip
    . $PKD/Edge.conf || FAIL
    ;;
    *)
    VENDOR=Amlogic
    ;;
esac

echo "[i] VENDOR $VENDOR ($DEF_CONFIG)"

[ "$#" = 0 ] && {
echo "[i] DEFCONFIG $DEF_CONFIG"
make -C"$BS" $DEF_CONFIG
}

echo "[i] make ($PJ) $@"

    grep -q logo $BS/arch/arm/dts/rk3399-khadas-edge.dtsi 2>/dev/null || {
    echo "[i] inject logo to dtb"
    export LOGO_PATH=$(realpath $PKD/files/splash.bmp.gz)
    sh $PKD/files/u-boot.logo.tpl >> $BS/arch/arm/dts/rk3399-khadas-edge.dtsi
    }


export BL31=$(realpath "$BUILD/arm-trusted-firmware/build/rk3399/release/bl31/bl31.elf")
[ -f "$BL31" ] || \
export BL31=$(realpath "$BUILD/rkbin/bin/rk33/rk3399_bl31_v1.31.elf")

[ -f "$BL31" ] || FAIL bl31 missed

echo "BL31 == $BL31"

#export PMUM0=$(realpath "$BUILD/arm-trusted-firmware/build/rk3399/release/m0/rk3399m0.bin")

make -C"$BS" $PJ $@ || FAIL make fail

[ "$1" = clean ] && exit 0

PKGS_DIR=$(realpath "$PKGS_DIR0")

(
cd "$BS"
UBOOT_DIR="$PWD"
post_make_target
)

echo "[i] READY"
(
cd "$BS"
ls -l1 u-boot.itb 
)

#generate_sd_mmc_image 2

[ -d "$BS/tpl" ] && {
echo "[i] TPL+SPL SPI"
$BS/tools/mkimage -n rk3399 -T rkspi -d $BS/tpl/u-boot-tpl-dtb.bin $UBOOT_SPI
cat $BS/spl/u-boot-spl-dtb.bin >> $UBOOT_SPI
ls -l1 $UBOOT_SPI
truncate -s $((0x40000-0)) $UBOOT_SPI
ls -l1 $UBOOT_SPI
cat $BS/u-boot.itb >> $UBOOT_SPI
gzip -c9 $UBOOT_SPI > $UBOOT_SPI.gz
}

[ -d "$BS/tpl" ] || {
echo "[i] SPL SPI"
$BS/tools/mkimage -n rk3399 -T rkspi -d $BS/spl/u-boot-spl-dtb.bin $UBOOT_SPI
ls -l1 $UBOOT_SPI
truncate -s $((0x40000-0)) $UBOOT_SPI
ls -l1 $UBOOT_SPI
cat $BS/u-boot.itb >> $UBOOT_SPI
gzip -c9 $UBOOT_SPI > $UBOOT_SPI.gz
}

[ -d "$BS/tpl" ] && {
echo "[i] TPL+SPL SD"
$BS/tools/mkimage -n rk3399 -T rksd -d $BS/tpl/u-boot-tpl-dtb.bin  $UBOOT_SD_MMC || DIE
ls -l1 $UBOOT_SD_MMC
cat $BS/spl/u-boot-spl-dtb.bin >> $UBOOT_SD_MMC
ls -l1 $UBOOT_SD_MMC
truncate -s $((0x40000-64*512))  $UBOOT_SD_MMC
cat $BS/u-boot.itb >> $UBOOT_SD_MMC
gzip -c9 $UBOOT_SD_MMC > $UBOOT_SD_MMC.gz

dd if=/dev/zero count=64 of=$UBOOT_SD_MMC0
cat $UBOOT_SD_MMC >> $UBOOT_SD_MMC0

}

[ -d "$BS/tpl" ] || {
echo "[i] SPL SD"
$BS/tools/mkimage -n rk3399 -T rksd -d $BS/spl/u-boot-spl-dtb.bin  $UBOOT_SD_MMC || DIE
ls -l1 $UBOOT_SD_MMC
truncate -s $((0x40000-64*512))  $UBOOT_SD_MMC
ls -l1 $UBOOT_SD_MMC
cat $BS/u-boot.itb >> $UBOOT_SD_MMC
gzip -c9 $UBOOT_SD_MMC > $UBOOT_SD_MMC.gz

dd if=/dev/zero count=64 of=$UBOOT_SD_MMC0
cat $UBOOT_SD_MMC >> $UBOOT_SD_MMC0
}

[ -b "/dev/sdc" ] && \
which image2sd.sh && \
    image2sd.sh $UBOOT_SD_MMC0 -a

