#!/bin/sh

## hyphop ##

#= make khadas uboot script wrapper

PR=$(dirname $0)
RP=$(realpath $PR)

cd "$PR"

MSG(){
    echo "[i] $@"
}

info_msg(){
    echo "[i] $@"
}

CMD(){
    echo "[#] $@">&2
    "$@"
}

FAIL(){
    echo "[e] $@">&2
    exit 1
}

PATCHING(){
[ -e "$BS/.ready.log" ] || {

for P in $PKD/patches/$PKG_VERSION/*.patch; do
    [ -f "$P" ] && {
	PN=$(basename $P)
	echo "[i] PATCH $PN"
	patch -p1 -d"$BS" < "$P" || FAIL
    }
done

echo READY > "$BS/.ready.log"

}
}

BUILD_PKG(){
PKG="$PKD/package.mk"

echo "[i] build $PKG"

make_host(){
.
}

. $PKG

./download \
    "$PKG_URL" \
    "$PKG_SOURCE_NAME" \
    "$DOWNLOADS" || FAIL download uboot source

BS="$BUILD/$PKG_SOURCE_DIR"

[ -s "$BS" ] || { echo "[i] EXTRACT ... $BS"
CMD tar -xf"$(realpath "$DOWNLOADS/$PKG_SOURCE_NAME")" -C"$BUILD" --one-top-level="$PKG_SOURCE_DIR"
CMD ln -sf "$PKG_SOURCE_DIR" "$BUILD/$PKG_NAME"
}

PATCHING

cd $BS

make_host || "[w] make_host no..."

cd -

}


echo "[i] make khadas uboot"

. ./build.conf

[ -d $DOWNLOADS ] || \
    mkdir -p $DOWNLOADS

[ -d "$BUILD" ] || \
    mkdir -p "$BUILD"

./download \
    $DLBASE/$GCCZ \
    $GCCZ \
    $DOWNLOADS || FAIL download gcc

[ -s "$BUILD/$GCC" ] || { echo "[i] EXTRACT ... $GCC"
tar -xf"$(realpath "$DOWNLOADS/$GCCZ")"        -C"$BUILD" --one-top-level="$GCC" || FAIL 
ln -sf $GCC $BUILD/gcc
}

./download \
    $DLBASE/$FIPZ \
    $FIPZ \
    $DOWNLOADS || FAIL download fip

[ -s "$BUILD/$FIP" ] || { echo "[i] EXTRACT ... $FIP"
tar -xf"$(realpath "$DOWNLOADS/$FIPZ")"        -C"$BUILD" --one-top-level="$FIP" || FAIL
}

for P in rkbin u-boot-mainline; do
    PKD=../packages/$P
    BUILD_PKG
done

#export PATH="$(realpath "$BUILD/$GCC")/bin:$PATH"
export PATH="$(realpath "$BUILD/gcc")/bin:$PATH"
export ARCH=arm64
export CROSS_COMPILE=aarch64-none-linux-gnu-

${CROSS_COMPILE}gcc --version || FAIL gcc

[ "$DEF_CONFIG" ] || DEF_CONFIG=$DEF_CONFIG2
#khadas-vim_defconfig

case $DEF_CONFIG in
    *edge*|*rk*)

    VENDOR=Rockchip
    . $PKD/Edge.conf || FAIL
    ;;
    *)
    VENDOR=Amlogic
    ;;
esac

echo "[i] VENDOR $VENDOR ($DEF_CONFIG)"

[ "$#" = 0 ] && {
echo "[i] DEFCONFIG $DEF_CONFIG"
make -C"$BS" $DEF_CONFIG
}

echo "[i] make ($PJ) $@"

make -C"$BS" $PJ $@

[ "$1" = clean ] && exit 0

#exit 0

PKGS_DIR=$(realpath "$PKGS_DIR0")


(
cd "$BS"
UBOOT_DIR="$PWD"
post_make_target
)


